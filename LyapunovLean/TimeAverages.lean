import LyapunovLean.Common
import Canonical
import Mathlib.Topology.Defs.Filter
import Mathlib.Topology.Instances.EReal.Lemmas

open Topology Filter

noncomputable def TimeAverage
    {n : ‚Ñï}
    (Œ¶ : Observable n 0)
    (x : ‚Ñù ‚Üí EuclideanSpace ‚Ñù (Fin n)) : EReal
  := limsup (fun (T : ‚Ñù) => ‚Üë(T‚Åª¬π * (‚à´ t in 0..T, Œ¶ (x t)))) atTop

lemma f_le_sup_compact {n : ‚Ñï} {B : Set (EuclideanSpace ‚Ñù (Fin n))} {x : EuclideanSpace ‚Ñù (Fin n)}
  (f : EuclideanSpace ‚Ñù (Fin n) ‚Üí ‚Ñù) (hf_cont : Continuous f) (hB_compact : IsCompact B)
  (hx : x ‚àà B) :
  f x ‚â§ sSup (f '' B) := by
    apply le_csSup
    ¬∑ exact (hB_compact.image hf_cont).isBounded.bddAbove
    ¬∑ exact Set.mem_image_of_mem f hx

lemma limsup_add_vanishes {f g : ‚Ñù ‚Üí EReal} (hg : Tendsto g atTop (ùìù 0)) :
  limsup (f + g) atTop = limsup f atTop := by
  have h1 : limsup g atTop ‚â† ‚ä§ := by
    rw [hg.limsup_eq]
    exact EReal.zero_ne_top
  have h2 : limsup g atTop ‚â† ‚ä• := by
    rw [hg.limsup_eq]
    exact EReal.zero_ne_bot

  apply le_antisymm
  ¬∑ grw [EReal.limsup_add_le (Or.inr h1) (Or.inr h2)]
    rw [hg.limsup_eq]
    simp only [add_zero, le_refl]
  ¬∑ grw [‚ÜêEReal.le_limsup_add]
    rw [hg.liminf_eq]
    simp only [add_zero, le_refl]

theorem lie_deriv_tendsto_zero
    {n : ‚Ñï}
    {B : Set (EuclideanSpace ‚Ñù (Fin n))}
    (V : Observable n 1)
    (f : C(EuclideanSpace ‚Ñù (Fin n), EuclideanSpace ‚Ñù (Fin n)))
    (x : ‚Ñù ‚Üí EuclideanSpace ‚Ñù (Fin n)) (hx : ‚àÄ t, HasDerivAt x (f (x t)) t)
    (hxb : ‚àÄ t, x t ‚àà B) (hB : IsCompact B)
  : Tendsto (fun T ‚Ü¶ T‚Åª¬π * ‚à´ (t : ‚Ñù) in 0..T, (LieDerivative V f).func (x t)) atTop (ùìù 0)
  := by
  have h_integrable (T : ‚Ñù) : IntervalIntegrable (deriv  (V ‚àò x)) MeasureTheory.volume 0 T := by
      have hxcont := (continuous_iff_continuousAt.mpr (fun t:‚Ñù => (hx t).continuousAt))
      have h2 : ‚àÄ T, IntervalIntegrable ((LieDerivative V f) ‚àò x) MeasureTheory.volume 0 T := by
        intro T
        have hcont : Continuous ((LieDerivative V f) ‚àò x) :=
          Continuous.comp (LieDerivative V f).contDiff.continuous hxcont
        exact Continuous.intervalIntegrable hcont 0 T

      rw [time_deriv_eq_lie_deriv V f x hx]
      apply h2
  have h_diff (T : ‚Ñù) : ‚àÄ t ‚àà Set.uIcc 0 T, DifferentiableAt ‚Ñù (V ‚àò x) t := by
    intro t ht
    exact DifferentiableAt.comp t
      (V.contDiff.differentiable le_rfl).differentiableAt
      (hx t).differentiableAt

  have hftc : (fun T ‚Ü¶ T‚Åª¬π * ‚à´ (t : ‚Ñù) in 0..T, (deriv  (V ‚àò x)) t)
      = fun T ‚Ü¶ T‚Åª¬π * ((V‚àòx) T - (V‚àòx) 0) := by
    refine funext ?_
    intro T
    rw [intervalIntegral.integral_deriv_eq_sub (h_diff T) (h_integrable T)]

  let Vmax := sSup ((fun x => |V x|) '' B)
  have hV_bounded (x) (hx : x‚ààB) : |V x| ‚â§ Vmax := by
    have hfun : Continuous (fun x => |V x|) := by
      have := V.contDiff.continuous
      fun_prop
    exact f_le_sup_compact (fun x => |V x|) hfun hB hx

  have hVx_bounded : ‚àÄ T, |(V‚àòx) T - (V‚àòx) 0| ‚â§ 2*Vmax := by
    intro T
    calc
      _ = |((V‚àòx) T) + (-(V‚àòx) 0)| := by ring_nf
      _ ‚â§ |(V‚àòx) T| + |-(V‚àòx) 0| := by grw [abs_add_le]
      _ = |V (x T)| + |V (x 0)| := by simp only [Function.comp_apply, abs_neg]
      _ ‚â§ Vmax + Vmax := by grw[hV_bounded (x T) (hxb T)]; grw[hV_bounded (x 0) (hxb 0)]
      _ = 2*Vmax := by ring

  have h_eventually :
    ‚àÄ·∂† (T : ‚Ñù) in atTop,
      |(V.func ‚àò x) T - (V.func ‚àò x) 0| ‚â§ (2 * Vmax : ‚Ñù) := by
    exact Eventually.of_forall hVx_bounded

  conv =>
    change Tendsto (fun T ‚Ü¶ T‚Åª¬π * ‚à´ (t : ‚Ñù) in 0..T, ((LieDerivative V f) ‚àò x) t) atTop (ùìù 0)
    rw [‚Üêtime_deriv_eq_lie_deriv V f x hx]
    rw [hftc]
    congr
    ext T
    simp only [Function.comp_apply]
    rw [mul_comm]
  exact (bdd_le_mul_tendsto_zero' (2*Vmax) h_eventually tendsto_inv_atTop_zero)

theorem time_ave_add_zero
    {n : ‚Ñï}
    (Œ¶ : Observable n 0)
    (Œ® : Observable n 0)
    (x : ‚Ñù ‚Üí EuclideanSpace ‚Ñù (Fin n)) (hx : Differentiable ‚Ñù x)
    (hŒ® : Tendsto (fun (T : ‚Ñù) => T‚Åª¬π * (‚à´ t in 0..T, Œ® (x t))) atTop (ùìù 0))
  : TimeAverage (Œ¶+Œ®) x = TimeAverage Œ¶ x := by
  simp only [TimeAverage]
  conv in (fun T ‚Ü¶ ‚Üë(T‚Åª¬π  * ‚à´ (t : ‚Ñù) in 0..T, (Œ¶ + Œ®).func (x t))) =>
    ext T
    congr
    conv in (Œ¶ + Œ®).func (x _) =>
      change (Œ¶.func + Œ®.func) (x _)
    simp only [Pi.add_apply]
    rw [intervalIntegral.integral_add
          (observable_integrable Œ¶ x hx T)
          (observable_integrable Œ® x hx T)]
    ring_nf
  simp only [EReal.coe_add, EReal.coe_mul]
  rw [‚ÜêPi.add_def]
  rw [‚ÜêEReal.tendsto_coe] at hŒ®
  exact limsup_add_vanishes hŒ®


theorem time_ave_pointwise
    {n : ‚Ñï} {B : Set (EuclideanSpace ‚Ñù (Fin n))}
    (Œ¶ : Observable n 0)
    (x : ‚Ñù ‚Üí EuclideanSpace ‚Ñù (Fin n)) (hx : Differentiable ‚Ñù x)
    (hxb : ‚àÄ t, x t ‚àà B) (hB : IsCompact B) :
    TimeAverage Œ¶ x ‚â§ sSup (Œ¶ '' B) := by

  have h_upper (T) : ‚àÄ t ‚àà Set.Ioo 0 T, Œ¶ (x t) ‚â§ sSup (Œ¶ '' B) :=
    fun t _ ‚Ü¶ le_csSup (hB.image Œ¶.contDiff.continuous).isBounded.bddAbove
      (Set.mem_image_of_mem _ (hxb t))
  have h_lower (T) : ‚àÄ t ‚àà Set.Ioo 0 T, Œ¶ (x t) ‚â• sInf (Œ¶ '' B) :=
    fun t _ ‚Ü¶ csInf_le (hB.image Œ¶.contDiff.continuous).isBounded.bddBelow
      (Set.mem_image_of_mem _ (hxb t))

  have hu {T} (hT : 0 < T) :
      T‚Åª¬π * ‚à´ t in 0..T, Œ¶ (x t) ‚â§ sSup (Œ¶ '' B) := by
    rw [inv_mul_le_iff‚ÇÄ hT]
    grw [intervalIntegral.integral_mono_on_of_le_Ioo
          (le_of_lt hT) (observable_integrable Œ¶ x hx T) intervalIntegrable_const (h_upper T)]
    rw [intervalIntegral.integral_const]
    simp only [sub_zero, smul_eq_mul, le_refl]

  have hl {T} (hT : 0 < T) :
      sInf (Œ¶ '' B) ‚â§ T‚Åª¬π * ‚à´ t in 0..T, Œ¶ (x t) := by
    rw [le_inv_mul_iff‚ÇÄ' hT]
    rw [‚Üêsub_zero T, ‚Üêsmul_eq_mul]
    rw [‚ÜêintervalIntegral.integral_const (sInf (Œ¶ '' B))]
    grw [intervalIntegral.integral_mono_on_of_le_Ioo
        (le_of_lt hT) intervalIntegrable_const (observable_integrable Œ¶ x hx T) (h_lower T)]
    simp only [sub_zero, le_refl]

  rw [TimeAverage]
  apply limsup_le_of_le
  ¬∑ apply isCoboundedUnder_le_of_eventually_le atTop
    ¬∑ filter_upwards [eventually_gt_atTop (0 : ‚Ñù)] with T hT
      apply EReal.coe_le_coe
      exact hl hT
  ¬∑ filter_upwards [eventually_gt_atTop (0 : ‚Ñù)] with T hT
    apply EReal.coe_le_coe
    exact hu hT

theorem time_ave_add_lie_deriv
    {n : ‚Ñï}
    (Œ¶ : Observable n 0)
    (V : Observable n 1)
    (f : C(EuclideanSpace ‚Ñù (Fin n), EuclideanSpace ‚Ñù (Fin n)))
    (x : ‚Ñù ‚Üí EuclideanSpace ‚Ñù (Fin n)) (hx : ‚àÄ t, HasDerivAt x (f (x t)) t)
    {B : Set (EuclideanSpace ‚Ñù (Fin n))}
    (hxb : ‚àÄ t, x t ‚àà B) (hB : IsCompact B)
  : TimeAverage (Œ¶ + LieDerivative V f) x = TimeAverage Œ¶ x
  := by
    apply time_ave_add_zero
    ¬∑ exact hasderivat_diffable hx
    ¬∑ exact lie_deriv_tendsto_zero V f x hx hxb hB

/-- Suppose we have a solution to a system dx/dt = f(x) defined for all time,
    and an auxiliary function V.
   Then the time average of Œ¶ is at most sup (Œ¶ + f‚¨ù‚àáV) over the domain. -/
theorem V_gives_upper_bound
    {n : ‚Ñï}
    (Œ¶ : Observable n 0)
    (V : Observable n 1)
    (f : C(EuclideanSpace ‚Ñù (Fin n), EuclideanSpace ‚Ñù (Fin n)))
    (x : ‚Ñù ‚Üí EuclideanSpace ‚Ñù (Fin n)) (hx : ‚àÄ t, HasDerivAt x (f (x t)) t)
    {B : Set (EuclideanSpace ‚Ñù (Fin n))}
    (hxb : ‚àÄ t, x t ‚àà B) (hB : IsCompact B) :
  TimeAverage Œ¶ x ‚â§ sSup ((Œ¶ + LieDerivative V f) '' B) := by
  rw [‚Üêtime_ave_add_lie_deriv Œ¶ V f x hx hxb hB]
  exact time_ave_pointwise (Œ¶ + LieDerivative V f) x (hasderivat_diffable hx) hxb hB
